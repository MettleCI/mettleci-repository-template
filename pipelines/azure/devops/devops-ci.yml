#   ___                      ______ _            _ _
#  / _ \                     | ___ (_)          | (_)
# / /_\ \_____   _ _ __ ___  | |_/ /_ _ __   ___| |_ _ __   ___  ___
# |  _  |_  / | | | '__/ _ \ |  __/| | '_ \ / _ \ | | '_ \ / _ \/ __|
# | | | |/ /| |_| | | |  __/ | |   | | |_) |  __/ | | | | |  __/\__ \
# \_| |_/___|\__,_|_|  \___| \_|   |_| .__/ \___|_|_|_| |_|\___||___/
#                                    | |
#                                    |_|
# -------------------------------------------------------------------
# MettleCI - DevOps for DataStage
# (C)2020-2023 Data Migrators Pty Ltd
# This Azure DevOps pipeline is unsupported and is provided only as a 
# practical example of how to use the MettleCI Command Line Interface 
# -------------------------------------------------------------------

# Trigger this pipeline with any commit to ...
# - This project's current branch as long as it's not a 'hotfix/' branch, and
# - Any file type except a '.yml' file (used for pipeline definitions)
trigger: 
  batch: true
  branches:
    exclude: 
    - "hotfix/*"                      # Don't trigger for hotfix commits
  paths:
    exclude:
    - "*.yml"                         # Ignore any commits to YAML (pipeline definition) files

#
# Project-related variables
#
variables:
  - name: BaseIISProjectName
    value: <BASE_PROJECT_NAME>                 # Set the base name of your project here!
  - name: ComplianceRepoName
    value: <COMPLIANCE_REPOSITORY_NAME>               # Set the name of your Compliance Rule repository here!
  - name: ComplianceFatalTags
    value: 'fail-ci'                    # Set the tag you use to identify fatal Compliance Rule here!         
  - name: PS_SpecialHandling
    value: true

# Reference to the Compliance Rule Repository
# Note:  The repository value below should match the ComplianceRepoName variable defined above. 
# Unfortunatley Azure DevOps won't (at the time of writing) let us use the above variable name in the
# resources declaration below.
resources:
 repositories:
 - repository: Compliance
   type: git
   name: <COMPLIANCE_REPOSITORY_NAME>


stages:

# This is a sample diagnostics dump which you may want to uncomment during your pipeline setup
# process to assist with understanding/debugging your pipeline definition.
#--- START ---
# ------------------------------------------------------------------------------
# Diagnostics
# ------------------------------------------------------------------------------
- stage: Diagnostics
  jobs:
  - job: Diagnostics117_NONPROD
    pool:
      name: <AGENT_POOL_NAME>
      demands:
      - MettleCI.CLI
      - DataStage.Version -equals 11.7
    variables:
      - group: <NONPROD_VARIABLE_GROUP>
      - name: EnvID
        value: "ci"
      - name: Datastage_Project
        value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}
    steps:
    - script: |
        echo "##vso[task.setvariable variable=PATH]$(AgentMettleAltJavaPath);$(PATH)"
      displayName: "Set java version"
      condition: ne('$(AgentMettleAltJavaPath)', '')
    - script: |
        echo "Diagnostics - 11.7 Non-Production Variable Group"
        echo "Alternate Java Path: $(AgentMettleAltJavaPath)"
        echo "IISUsername: $(IISUsername)"
        echo "IISPassword: $(IISPassword)"
        echo "IISDomainName: $(IISDomainName)"
        echo "IISEngineName: $(IISEngineName)"
        echo "EnvID: $(EnvID)"
        echo "BaseIISProjectName: ${{ variables.BaseIISProjectName }}"
        echo "Datastage_Project: ${{ variables.Datastage_Project }}"
        echo "ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}"
        echo "IISUsername: $(IISUsername)"
        echo "IISPassword: $(IISPassword)"
        echo "MCIUsername: $(MCIUsername)"
        echo "MCIPassword: $(MCIPassword)"
        echo "AgentMettleCmd: $(AgentMettleCmd)"
        echo "ADOProject: $(System.TeamProject)"
        echo "SourceRepo: $(Build.Repository.Name)"
        echo "Agent.Name: $(Agent.Name)"
        echo "Repo resource: $[ resources.repositories['Compliance'].name ]"
        echo "Build reason: $(Build.Reason)"
      displayName: 'Diagnostics v11.7 Non-Production'
    - script: |
        set | sort
      displayName: "Get environment variables"
    - script: |
        java -version
      displayName: "Get Java version"

#  - job: Diagnostics117_PROD
#    pool:
#      name: <AGENT_POOL_NAME>
#      demands:
#      - MettleCI.CLI
#      - DataStage.Version -equals 11.7
#    variables:
#      - group: <PROD_VARIABLE_GROUP>
#      - name: EnvID
#        value: "ci"
#      - name: Datastage_Project
#        value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}
#    steps:
#    - script: |
#        echo "Diagnostics - 11.7 Production Variable Group"
#        echo "IISUsername: $(IISUsername)"
#        echo "IISPassword: $(IISPassword)"
#        echo "IISDomainName: $(IISDomainName)"
#        echo "IISEngineName: $(IISEngineName)"
#        echo "BaseIISProjectName: ${{ variables.BaseIISProjectName }}"
#        echo "Datastage_Project: ${{ variables.Datastage_Project }}"
#        echo "ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}"
#        echo "IISUsername: $(IISUsername)"
#        echo "IISPassword: $(IISPassword)"
#        echo "MCIUsername: $(MCIUsername)"
#        echo "MCIPassword: $(MCIPassword)"
#        echo "AgentMettleCmd: $(AgentMettleCmd)"
#        echo "ADOProject: $(System.TeamProject)"
#        echo "SourceRepo: $(Build.Repository.Name)"
#        echo "Agent.Name: $(Agent.Name)"
#        echo "Repo resource: $[ resources.repositories['Compliance'].name ]"
#        echo "ComplianceRepoName: ${{ variables.ComplianceRepoName }}"
#        echo "Build reason: $(Build.Reason)"
#      displayName: 'Diagnostics v11.7 Production'
#    - script: |
#        set | sort
#      displayName: "Get environment variables"
#--- END ---


#------------------------------------------------------------------------------
# Deploy to CI environment
#------------------------------------------------------------------------------
- stage: Deploy_CI

  # The variable group(s) that describe your DataStage environment(s).
  # Configure these in your Pipelines -> Library -> Variable Groups configuration page.
  variables:
    - group: <NONPROD_VARIABLE_GROUP>
    - name: EnvID
      value: "ci"                       # The project name extension used to identify your CI environment 
    - name: Datastage_Project
      value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}

  # The agent(s) qualified to run this stage (almost always a DataStage Windows client)
  # Configure these in your Project Settings -> Agent Pools configuration page.
  pool:
    name: <AGENT_POOL_NAME>
    demands:
    - MettleCI.CLI
    - DataStage.Version -equals 11.7

  jobs:
  # Deploy this software configuration (including the latest commit) to the
  # DataStage development project's "_CI" companion project.
  - template: /pipelines/azure/templates/deploy-template.yml
    parameters:
      DomainName: $(IISDomainName)
      EngineName: $(IISEngineName)
      EnvironmentID: ${{ variables.EnvID }}
      EnvironmentName: DevOps - Continuous Integration
      DatastageProject: ${{ variables.Datastage_Project }}
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      IISUsername: $(IISUsername)
      IISPassword: $(IISPassword)
      MCIUsername: $(MCIUsername)
      MCIPassword: $(MCIPassword)
      PublishCompilationTests: true
      mettlecicmd: $(AgentMettleCmd)
      MettleHomeDir: $(AgentMettleHome)
      UpdateDSParams: false
      PSSpecialHandling: ${{ variables.PS_SpecialHandling }}
      AlternateJavaPath: $(AgentMettleAltJavaPath)

#------------------------------------------------------------------------------
# Execute Compliance and Unit Tests
#------------------------------------------------------------------------------
- stage: Test_CI

  variables:
    - group: <NONPROD_VARIABLE_GROUP>
    - name: EnvID     
      value: "ci"           # The project name extension used to identify your CI environment (e.g. 'MyProject_ci')
    - name: Datastage_Project
      value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}
    - name: TagValue
      value: ${{ variables.EnvID }}.$(Build.BuildNumber)

  pool:
    name: <AGENT_POOL_NAME>
    demands:
    - MettleCI.CLI
    - DataStage.Version -equals 11.7

  jobs:
  # Run MettleCI Compliance for warnings
  - template: /pipelines/azure/templates/compliance-template.yml
    parameters:
      ProjectName: ${{ variables.BaseIISProjectName }}
      ComplianceSuite: CI WARN
      ComplianceRepoName: ${{ variables.ComplianceRepoName }}
      SourceRepoName: $(Build.Repository.Name)
      IncludeTags: ''
      ExcludeTags: ${{ variables.ComplianceFatalTags }}
      ContinueOnError: true
      mettlecicmd: $(AgentMettleCmd)
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      AlternateJavaPath: $(AgentMettleAltJavaPath)

  # Run MettleCI Compliance for fatal errors
  - template: /pipelines/azure/templates/compliance-template.yml
    parameters:
      ProjectName: ${{ variables.BaseIISProjectName }}
      ComplianceSuite: CI FATAL
      ComplianceRepoName: ${{ variables.ComplianceRepoName }}
      SourceRepoName: $(Build.Repository.Name)
      IncludeTags: ${{ variables.ComplianceFatalTags }}
      ExcludeTags: ''
      ContinueOnError: false
      mettlecicmd: $(AgentMettleCmd)
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      AlternateJavaPath: $(AgentMettleAltJavaPath)

  # Run MettleCI Unit Testing
  - template: /pipelines/azure/templates/unittest-template.yml
    parameters:
      DomainName: $(IISDomainName)
      EngineName: $(IISEngineName)
      EnvironmentID: ${{ variables.EnvID }}
      EnvironmentName: CI
      DatastageProject: ${{ variables.Datastage_Project }}
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      MCIUsername: $(MCIUsername)
      MCIPassword: $(MCIPassword)
      IISUsername: $(IISUsername)
      IISPassword: $(IISPassword)
      mettlecicmd: $(AgentMettleCmd)
      unittestpath: $(EngineUnitTestBaseDir)
      AlternateJavaPath: $(AgentMettleAltJavaPath)

  # Tag this build with the deployed environment name (CI)
  # Note that we tag in this pipeline definition as Azure doesn't currently
  # support tagging within a template. ¯\_(ツ)_/¯
  - job:
    displayName: 'Tag Release Candidate'

    # This declaration prevents this job running until the referenced jobs have completed.
    # Note that the job names used below are defined WITHIN each template and, in the case
    # of compliance, are dynamically constructed programatically using supplied parameters.
    dependsOn: 
    - Compliance_Test_CI_WARN
    - Compliance_Test_CI_FATAL
    - Unit_Test_CI

    steps:
    - checkout: self
      persistCredentials: true
    - script: |
        echo ##vso[build.addbuildtag]${{ variables.EnvID }}
      displayName: 'Tag ${{ variables.EnvID }} deploy'  
    - script: |
        echo Git user.name $(Build.RequestedFor)
        echo Git user.email $(Build.RequestedForEmail)
        echo Tag ${{ variables.EnvID }}-$(Build.BuildNumber)
        git config --global user.name $(Build.RequestedFor)
        git config --global user.email $(Build.RequestedForEmail)
        git tag -a ${{ variables.TagValue }} -m "MettleCI Release Candidate"
        git push origin ${{ variables.TagValue }}
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Tag Git commit'  

# This pipeline stage (and the ones following it) deploys the code configuration
# which has just passed CI testing to generically-named 'QA' (Quality Assurance),
# 'Perf' (Performance), and 'Prod' (Production) environments.  
#
# Your software release chain is liklely to be different to these so define the
# environments and dependencies which quite your organization's needs.

# Each of these environments needs to be defined in your Azure DevOps project's
# Environments configuration page which can be found under Pipelines -> Environments.
# This is also where you will configure each environment's 'Approvals and Checks' 
# which is how you define the steps required to authorize a depoyment to a given
# environment.

#------------------------------------------------------------------------------
# Deploy to Quality Assurance
#------------------------------------------------------------------------------
- stage: Deploy_QA

  variables:
    - group: <NONPROD_VARIABLE_GROUP>
    - name: EnvID
      value: "qa"
    - name: EnvName
      value: "DevOps - Quality Assurance"      # Ensure this name matches your Azure Environment configuration
    - name: Datastage_Project
      value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}
    - name: TagValue
      value: ${{ variables.EnvID }}.$(Build.BuildNumber)

  pool:
    name: <AGENT_POOL_NAME>
    demands:
    - MettleCI.CLI
    - DataStage.Version -equals 11.7

  jobs:
  - template: /pipelines/azure/templates/deploy-template.yml
    parameters:
      DomainName: $(IISDomainName)
      EngineName: $(IISEngineName)
      EnvironmentID: ${{ variables.EnvID }}
      EnvironmentName: ${{ variables.EnvName }}
      DatastageProject: ${{ variables.Datastage_Project }}
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      IISUsername: $(IISUsername)
      IISPassword: $(IISPassword)
      MCIUsername: $(MCIUsername)
      MCIPassword: $(MCIPassword)
      PublishCompilationTests: true
      mettlecicmd: $(AgentMettleCmd)
      ProjectTemplate: $(IISProjectTemplateDir)
      MettleHomeDir: $(AgentMettleHome)
      UpdateDSParams: false
      PSSpecialHandling: ${{ variables.PS_SpecialHandling }}
      AlternateJavaPath: $(AgentMettleAltJavaPath)

  # Tag this build with the deployed environment name (QA)
  # Note: We tag here as Azure doesn't currently support tagging within a template
  - job:
    displayName: 'Tag deployment'
    dependsOn: 
    - Deploy_${{ variables.EnvID }}
    steps:
    - checkout: self
      persistCredentials: true
    - script: |
        echo ##vso[build.addbuildtag]${{ variables.EnvID }}
      displayName: 'Tag ${{ variables.EnvID }} deploy'  
    - script: |
        echo Git user.name $(Build.RequestedFor)
        echo Git user.email $(Build.RequestedForEmail)
        echo Tag ${{ variables.TagValue }}
        git config --global user.name $(Build.RequestedFor)
        git config --global user.email $(Build.RequestedForEmail)
        git tag -a ${{ variables.TagValue }} -m "MettleCI deployment to ${{ variables.EnvName }}"
        git push origin ${{ variables.TagValue }}
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Tag Git commit'

#------------------------------------------------------------------------------
# Deploy to Performance
#------------------------------------------------------------------------------
- stage: Deploy_Perf

  variables:
    - group: <NONPROD_VARIABLE_GROUP>
    - name: EnvID
      value: "perf"
    - name: EnvName
      value: "DevOps - Performance"      # Ensure this name matches your Azure Environment configuration
    - name: Datastage_Project
      value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}
    - name: TagValue
      value: ${{ variables.EnvID }}.$(Build.BuildNumber)

  pool:
    name: <AGENT_POOL_NAME>
    demands:
    - MettleCI.CLI
    - DataStage.Version -equals 11.7

  jobs:
  - template: /pipelines/azure/templates/deploy-template.yml
    parameters:
      DomainName: $(IISDomainName)
      EngineName: $(IISEngineName)
      EnvironmentID: ${{ variables.EnvID }}
      EnvironmentName: ${{ variables.EnvName }}
      DatastageProject: ${{ variables.Datastage_Project }}
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      IISUsername: $(IISUsername)
      IISPassword: $(IISPassword)
      MCIUsername: $(MCIUsername)
      MCIPassword: $(MCIPassword)
      PublishCompilationTests: true
      mettlecicmd: $(AgentMettleCmd)
      ProjectTemplate: $(IISProjectTemplateDir)
      MettleHomeDir: $(AgentMettleHome)
      UpdateDSParams: false
      PSSpecialHandling: ${{ variables.PS_SpecialHandling }}
      AlternateJavaPath: $(AgentMettleAltJavaPath)

  # Tag this build with the deployed environment name (PERF)
  - job:
    displayName: 'Tag deployment'
    dependsOn: 
    - Deploy_${{ variables.EnvID }}
    steps:
    - checkout: self
      persistCredentials: true
    - script: |
        echo ##vso[build.addbuildtag]${{ variables.EnvID }}
      displayName: 'Tag ${{ variables.EnvID }} deploy'
    - script: |
        echo Git user.name $(Build.RequestedFor)
        echo Git user.email $(Build.RequestedForEmail)
        echo Tag ${{ variables.TagValue }}
        git config --global user.name $(Build.RequestedFor)
        git config --global user.email $(Build.RequestedForEmail)
        git tag -a ${{ variables.TagValue }} -m "MettleCI deployment to ${{ variables.EnvName }}"
        git push origin ${{ variables.TagValue }}
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Tag Git commit'

#------------------------------------------------------------------------------
# Deploy to Production
#------------------------------------------------------------------------------
- stage: Deploy_Prod

  variables:
    - group: <PROD_VARIABLE_GROUP>
    - name: EnvID
      value: "prod"
    - name: HotfixEnvID
      value: "hf"
    - name: EnvName
      value: "DevOps - Production"      # Ensure this name matches your Azure Environment configuration
    - name: Datastage_Project
      value: ${{ variables.BaseIISProjectName }}_${{ variables.EnvID }}
    - name: TagValue
      value: ${{ variables.EnvID }}.$(Build.BuildNumber)

  pool:
    name: <AGENT_POOL_NAME>
    demands:
    - MettleCI.CLI
    - DataStage.Version -equals 11.7

  jobs:
  - template: /pipelines/azure/templates/deploy-template.yml
    parameters:
      DomainName: $(IISDomainName)
      EngineName: $(IISEngineName)
      EnvironmentID: ${{ variables.EnvID }}
      EnvironmentName: ${{ variables.EnvName }}
      DatastageProject: ${{ variables.Datastage_Project }}
      ProjectCacheDir: $(AgentMettleHome)\cache\$(IISEngineName)\${{ variables.Datastage_Project }}
      IISUsername: $(IISUsername)
      IISPassword: $(IISPassword)
      MCIUsername: $(MCIUsername)
      MCIPassword: $(MCIPassword)
      PublishCompilationTests: true
      mettlecicmd: $(AgentMettleCmd)
      ProjectTemplate: $(IISProjectTemplateDir)
      MettleHomeDir: $(AgentMettleHome)
      UpdateDSParams: false
      PSSpecialHandling: ${{ variables.PS_SpecialHandling }}
      AlternateJavaPath: $(AgentMettleAltJavaPath)

  # Tag this build with the deployed environment name (PROD)
  - job:
    displayName: 'Tag deployment'
    dependsOn: 
    - Deploy_${{ variables.EnvID }}
    steps:
    - checkout: self
      persistCredentials: true
    - script: |
        echo ##vso[build.addbuildtag]${{ variables.EnvID }}
      displayName: 'Tag build $(Build.BuildNumber)'
    - script: |
        echo Git user.name $(Build.RequestedFor)
        echo Git user.email $(Build.RequestedForEmail)
        echo Tag ${{ variables.TagValue }}
        git config --global user.name $(Build.RequestedFor)
        git config --global user.email $(Build.RequestedForEmail)
        git tag -a ${{ variables.TagValue }} -m "MettleCI deployment to ${{ variables.EnvName }}"
        git push origin ${{ variables.TagValue }}
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Tag Git commit'

# The completion of this pipeline will cause Azure DevOps to invoke any
# other pipelines with a resources decleration of the form...
#
# resources:
#   pipelines:
#   - pipeline: MyTrigger                 # Some label to associated with the pipeline resource
#     source: ADO-WWI-117-DevOps-CI       # The actual name of the pipeline referenced by this pipeline resource
#     trigger: true

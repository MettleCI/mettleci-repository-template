// ███╗   ███╗███████╗████████╗████████╗██╗     ███████╗ ██████╗██╗
// ████╗ ████║██╔════╝╚══██╔══╝╚══██╔══╝██║     ██╔════╝██╔════╝██║
// ██╔████╔██║█████╗     ██║      ██║   ██║     █████╗  ██║     ██║
// ██║╚██╔╝██║██╔══╝     ██║      ██║   ██║     ██╔══╝  ██║     ██║
// ██║ ╚═╝ ██║███████╗   ██║      ██║   ███████╗███████╗╚██████╗██║
// ╚═╝     ╚═╝╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝ ╚═════╝╚═╝
// MettleCI DevOps for DataStage       (C) 2021-2025 Data Migrators
//// This workflow is the control flow for implementing a DevOp process for
// IBM DataStage v11.7 using Jenkins and the MettleCI CLI.
// This workflow acts in a coordinating role, with most of the work being
// done in the 'mci_*.groovy' template workflows which are invoked from this workflow.
// These workflows are located in the a separate repository 'jenkins-templates' shared
// library, which needs to be referenced in the `@Library` configuration below.
//
// Each of those template workflows is responsible for a specific task, such as:
// - Deploying assets to a DataStage v11.x environment
// - Running compliance tests in a DataStage v11.x environment
// - Running unit tests in a DataStage v11.x environment
// - Running the IBM Connector Migration Toolkit
// - Deploying assets to a DataStage environment in Cloud Pak For Data v5.x  
// - Running compliance tests in a DataStage environment in Cloud Pak For Data v5.x
//
// The template workflows contain more detailed task-specific documentation and are
// designed to be reusable, so you can use invoke them from other workflows.
//
// Resources:
// CI/CD Pipeline Developers Guide
// See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/1266843717/Repeatable+DataStage+Project+Deployments
//
// MettleCI Command Line Interface
// See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/408354840/MettleCI+CLI+Operating+Modes
//

// In summary, this workflow performs the following tasks:
// 1. Sets up the environment for the build
// 2. Dumps diagnostic values to the execution log (optional)
// 3. Deploys the assets to the DataStage environment
// 4. Runs the MettleCI compliance command to check the assets
// 5. Runs the MettleCI unit test command to check the assets
// 6. Tags the repository with the build number

// In Jenkins configuration, under Jenkins -> Manage Jenkins -> Configure System -> Global Pipeline Libraries,
// add a refeerence to the Jenkins MCI Shared Libraries, giving it an appropraite name.  You can then reference
// that shared library in the libe below to use the MettleCI-enabled step they define.
@Library('jenkins-templates') _

pipeline {
  	agent none

    tools {
        jdk 'jdk-8'
    }

    // Sets up the environment for the build
    environment {
        IIS_BASE_PROJECT_NAME = '<BASE_PROJECT_NAME>'

        COMPLIANCE_REPO_CREDENTIALS = '<JENKINS_COMPLIANCE_CREDENTIAL_ID>'
        COMPLIANCE_REPO_URL = '<COMPLIANCE_REPO_URL>'
        COMPLIANCE_REPO_BRANCH = '<COMPLIANCE_REPO_BRANCH>'

        PS_SPECIALHANDLING = true

        TAG_EMAIL = '<EMAIL>'
        TAG_USER = '<USERNAME>'

        COMPLIANCE_FATAL_TAG = 'fail-ci'

        USE_SSH_KEY = true
        USE_SSH_PASSPHRASE = false
    }

    stages {

        // Dumps diagnostic values to the execution log (optional)
        stage("Diagnostics 11.7") {
            agent {
                label 'mettleci && datastage11.7'
            }
            environment {
                ENVID = "ci"
                DATASTAGE_PROJECT = "${env.IIS_BASE_PROJECT_NAME}_${env.ENVID}"
            }

            steps {
                withCredentials([
                    string(credentialsId: "${env.IISPASSWORD}", variable: 'IISPASSWORD'),
                    string(credentialsId: "${env.MCIPASSWORD}", variable: 'MCIPASSWORD')
                ]) {
                    bat label: 'Diags 117', 
                        script: '''
                            echo IISUsername: %IISUSERNAME%
                            echo IISPassword: %IISPASSWORD%
                            echo IISDomainName: %IISDOMAINNAME%
                            echo IISEngineName: %IISENGINENAME%
                            echo EnvID: %ENVID%
                            echo BaseIISProjectName: %IIS_BASE_PROJECT_NAME%
                            echo DatastageProject: %DATASTAGE_PROJECT%
                            echo ProjectCacheDir: %AGENTMETTLEHOME%\\cache\\%IISENGINENAME%\\%DATASTAGE_PROJECT%
                            echo MCIUsername: %MCIUSERNAME%
                            echo MCIPassword: %MCIPASSWORD%
                            echo AgentMettleCmd: %AGENTMETTLEHOME%
                            echo Agent Name: %NODE_NAME%

                            java -version
                        '''

                }
            }
        }

        // Deploys the assets to the DataStage environment
        stage("Deploy - CI") {
            agent {
                label 'mettleci && datastage11.7 && ci'
            }
            // We've deploying to the CI environment, so we need to set the environment variables
            // to point to the CI environment.  This is done by setting the ENVID variable to "ci"
            // and the DATASTAGE_PROJECT variable to the name of our project with the '_CI' suffix.
            environment {
                ENVID = "ci"
                DATASTAGE_PROJECT = "${env.IIS_BASE_PROJECT_NAME}_${env.ENVID}"
                UPGRADE_DSPARAMS = false
            }

            steps {
                withCredentials([
                    string(credentialsId: "${env.IISPASSWORD}", variable: 'IISPASSWORD'),
                    string(credentialsId: "${env.MCIPASSWORD}", variable: 'MCIPASSWORD'),
                    string(credentialsId: "${env.SSHKEYPATH}", variable: 'SSHKEYPATH'),
                    string(credentialsId: "${env.SSHKEYPHRASE}", variable: 'SSHKEYPHRASE')
                ]) {
                    // Invoke the mci_deploy.groovy template workflow to deploy the assets
                    // to the DataStage environment.  
                    mci_deploy(
                        true,
                        UPGRADE_DSPARAMS,
                        PS_SPECIALHANDLING,
                        USE_SSH_KEY,
                        USE_SSH_PASSPHRASE
                    )
                }
            }
        }

        stage('Test - CI') {                    
            agent {
                label 'mettleci && datastage11.7 && ci'
            }
            environment {
                ENVID = "ci"
                DATASTAGE_PROJECT = "${env.IIS_BASE_PROJECT_NAME}_${env.ENVID}"
            }

            steps {
                withCredentials([
                    string(credentialsId: "${env.IISPASSWORD}", variable: 'IISPASSWORD'),
                    string(credentialsId: "${env.MCIPASSWORD}", variable: 'MCIPASSWORD'),
                    string(credentialsId: "${env.SSHKEYPATH}", variable: 'SSHKEYPATH'),
                    string(credentialsId: "${env.SSHKEYPHRASE}", variable: 'SSHKEYPHRASE')
                ]) {
                    // Invokes the mci_compliance.groovy template workflow to run the compliance tests
                    // against the DataStage CI  environment. This runs only the CRITICAL Compliance rules.
                    // Any failures will return a non-zero exit code and cause the pipeline to fail
                    // The results of the compliance tests are published to the GitHub Actions UI
                    mci_compliance(
                        env.COMPLIANCE_REPO_CREDENTIALS,
                        env.COMPLIANCE_REPO_URL,
                        env.COMPLIANCE_REPO_BRANCH,
                        "",
                        env.COMPLIANCE_FATAL_TAG,
                        "Warnings",
                        true
                    )

                    // Invokes the mci_compliance.groovy template workflow to run compliance tests
                    // against the DataStage CI environment. This runs only the NON-CRITICAL Compliance rules.
                    // Any failures will return a zero exit code and the pipeline will continue to execute  
                    // The results of the compliance tests will still be published to the GitHub Actions UI. 
                    mci_compliance(
                        env.COMPLIANCE_REPO_CREDENTIALS,
                        env.COMPLIANCE_REPO_URL,
                        env.COMPLIANCE_REPO_BRANCH,
                        env.COMPLIANCE_FATAL_TAG,
                        "",
                        "Errors",
                        false
                    )

                    // Invokes the mci_unittest.groovy template workflow to run unit tests
                    // against the DataStage CI environment.
                    // Any failures will return a zero exit code and the pipeline will continue to execute  
                    // The results of the compliance tests will still be published to the GitHub Actions UI. 
                    mci_unittest(
                        "CI",
                        USE_SSH_KEY,
                        USE_SSH_PASSPHRASE
                    )
                }
            }
        } 

        // Tags the repository with the build number
        stage('Success - Tag Repository') {
            agent {
                label 'mettleci && datastage11.7'
            }
            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: scm.getUserRemoteConfigs()[0].getCredentialsId())
                ]) {
                    bat label: 'Tag current build',
                        script: """
                            git config user.email \"${TAG_EMAIL}\"
                            git config user.name \"${TAG_USER}\"
                            git tag -a ci-${env.BUILD_NUMBER} -m \"${env.JOB_BASE_NAME}: build ${env.BUILD_NUMBER} succeeded\"
                            git push origin --tags
                        """
                }
            }
        }
    }
}




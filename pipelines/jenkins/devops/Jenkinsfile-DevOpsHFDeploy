// Jenkins MettleCI DevOps Pipeline - Branch-based approach

// In Jenkins configuration, under Jenkins -> Manage Jenkins -> Configure System -> Global Pipeline Libraries,
// add a refeerence to the Jenkins MCI Shared Libraries, giving it the name "jenkins-mci-shared-libraries"
// Doing that allows this line to reference that shared library and use the MettleCI step types
import groovy.transform.Field

@Library('jenkins-templates') _

@Field
def SELECTED_TAG = ""


pipeline {
  	agent none

    tools {
        jdk 'jdk-8'
    }

    options { skipDefaultCheckout() }

    environment {
        IIS_BASE_PROJECT_NAME = '<BASE_PROJECT_NAME>'

        PS_SPECIALHANDLING = true

        ENVID = "prod"

        TAG_EMAIL = '<EMAIL>'
        TAG_USER = '<USERNAME>'

        NUM_TAGS_TO_DISPLAY = 3
        TAG_PREFIX = 'ci-hf'

        USE_SSH_KEY = true
        USE_SSH_PASSPHRASE = false
    }

    stages {
        stage('Select Release to Deploy') {
            agent {
                label "mettleci && datastage11.7 && prod"
            }
            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: scm.getUserRemoteConfigs()[0].getCredentialsId())
                ]) {
                    script {
                        def tagScr = """
                            @echo off
                            git ls-remote --tags --sort=\"-v:refname\" ${scm.getUserRemoteConfigs()[0].getUrl()} \"*${TAG_PREFIX}-*^{}\"
                        """   

                        String[] allTags = bat(script: tagScr, label: 'Retreive tags', returnStdout: true).trim().split("\n")
                        def cleanedTags = []

                        int tagsRemaining = env.NUM_TAGS_TO_DISPLAY

                        if (allTags.size() == 0) {
                            // No updates to the hotfix branch: nothing to deploy
                            currentBuild.result = 'ABORTED'
                            error("No available builds for the current hotfix branch: nothing to deploy.")
                        }

                        for (String line in allTags) {
                            if (tagsRemaining-- == 0)  break
                            
                            cleanedTags.add("${line.split("/")[-1][0..-4]}")
                        }

                        SELECTED_TAG = input message: 'Select the hotfix to deploy', parameters: [choice(choices: cleanedTags.join('\n'),  description: 'Version', name: 'tag_response')]
                    }
                }

                bat label: 'Deployment',
                    script: "echo *** Deploying hotfix tag ${SELECTED_TAG} to Production ***"
            }
        }

        stage('Deploy - Target') {
            agent {
                label "mettleci && datastage11.7 && ${ env.ENVID }"
            }
            environment {
                DATASTAGE_PROJECT = "${env.IIS_BASE_PROJECT_NAME}_${env.ENVID}"
                UPGRADE_DSPARAMS = false
            }

            steps {
                withCredentials([
                    string(credentialsId: "${env.IISPASSWORD}", variable: 'IISPASSWORD'),
                    string(credentialsId: "${env.MCIPASSWORD}", variable: 'MCIPASSWORD'),
                    string(credentialsId: "${env.SSHKEYPATH}", variable: 'SSHKEYPATH'),
                    string(credentialsId: "${env.SSHKEYPHRASE}", variable: 'SSHKEYPHRASE')
                ]) {
                    checkout([  
                        $class: 'GitSCM',
                        branches: [[name: "refs/tags/${SELECTED_TAG}"]],
                        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                        extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],
                        userRemoteConfigs: scm.userRemoteConfigs,
                    ])
                    
                    mci_deploy(
                        true,
                        UPGRADE_DSPARAMS,
                        PS_SPECIALHANDLING,
                        USE_SSH_KEY,
                        USE_SSH_PASSPHRASE
                    )
                }
            }
        }

        stage('Success - Tag Repository') {
            agent {
                label 'mettleci && datastage11.7'
            }
            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: scm.getUserRemoteConfigs()[0].getCredentialsId())
                ]) {
                    checkout([  
                        $class: 'GitSCM',
                        branches: [[name: "refs/tags/${SELECTED_TAG}"]],
                        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                        extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],
                        userRemoteConfigs: scm.userRemoteConfigs,
                    ])
                    
                    bat label: 'Tag current build',
                        script: """
                            git config user.email \"${TAG_EMAIL}\"
                            git config user.name \"${TAG_USER}\"
                            git tag -a prod-${SELECTED_TAG.split('-')[1..-1].join('-')}  -m \"${env.JOB_BASE_NAME}: ${SELECTED_TAG} deployed to Production\"
                            git push -f origin --tags
                        """
                }
            
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}: prod-${SELECTED_TAG.split('-')[1..-1].join('-')}"
                    currentBuild.description = "Hotfix ${SELECTED_TAG} deployed to Production"
                }
            }
        }

    }
}

# ███╗   ███╗███████╗████████╗████████╗██╗     ███████╗ ██████╗██╗
# ████╗ ████║██╔════╝╚══██╔══╝╚══██╔══╝██║     ██╔════╝██╔════╝██║
# ██╔████╔██║█████╗     ██║      ██║   ██║     █████╗  ██║     ██║
# ██║╚██╔╝██║██╔══╝     ██║      ██║   ██║     ██╔══╝  ██║     ██║
# ██║ ╚═╝ ██║███████╗   ██║      ██║   ███████╗███████╗╚██████╗██║
# ╚═╝     ╚═╝╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝ ╚═════╝╚═╝
# MettleCI DevOps for DataStage       (C) 2021-2025 Data Migrators

# This template workflow defines a reusable process for running the DataStage CCMT (Change Control Migration Tool)
# command when using GitHub Actions to perform an upgrade from a legacy version of DataStage 11.x 
# See https://www.ibm.com/docs/en/iis/11.7.0?topic=connectivity-connector-migration-tool 

# This template workflow is designed to be called from other workflows and requires specific inputs to function correctly.

name: MettleCI CCMT Template

# Define the parameters for this reusable workflow
on:
  workflow_call:
    inputs:
      # The RunOn parameter specifies the requirements of the agent on which the job will run
      RunOn:
        required: true
        type: string
      # The EnvironmentName parameter specifies the long name of the environment
      # e.g. Quality Assurance, Production, etc.
      EnvironmentName:
        description: ''
        required: true
        type: string
      # The EnvID parameter specifies the environment ID
      # e.g. 'CI', 'QA', etc.
      EnvID:
        required: true
        type: string
      IISDomainName:
        description: ''
        required: true
        type: string
      IISEngineName:
        description: ''
        required: true
        type: string
      DatastageProject:
        description: ''
        required: true
        type: string
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/1356890161/MettleCI+CLI+and+the+project-cache+directory
      ProjectCacheDir:
        description: ''
        required: true
        type: string
      IISUsername:
        description: ''
        required: true
        type: string
      # The AgentMettleCmd parameter specifies the path to the MettleCI CLI
      AgentMettleCmd:
        required: true
        type: string
      # The PublishCompilationTests parameter specifies whether to publish the compilation test results
      PublishCompilationTests:
        required: false
        type: boolean
        default: false
      # For upgrade workflows using Oracle connectors, specify whether you want to modify the Oracle variant
      UpgradeOracleVariant:
        description: 'True to update Oracle Connector Variant'
        required: false
        type: boolean
        default: false
      # For upgrade workflows using Oracle connectors, specify the default Oracle variant
      UpgradedOracleVersion:
        description: 'If UpgradeOracleVariant set to true, specify 11 or 12 (default is 11)'
        required: false
        type: string
        default: "11"
      # The AlternateJavaPath parameter specifies the path to an alternate Java installation
      # This is used if you want the MettleCI CLI to run with a specific Java version
      AlternateJavaPath:
        description: 'If agent primary Java version > 8, specify alternate JDK8 path for MettleCI CLI'
        required: false
        type: string
        default: ""

# Specify GitHub Token permissions
permissions:
  contents: read
  checks: write

# Where the (Windows based) runner should execute commands
defaults:
  run:
    shell: cmd

jobs:
  ExecuteCCMT: 
    runs-on: ${{ fromJSON(inputs.RunOn) }}
    environment: ${{ inputs.EnvironmentName }}
    env:
      DATASTAGE_PROJECT: ${{ inputs.DatastageProject }}
      ENVID: ${{ inputs.EnvID }}
      IISENGINENAME: ${{ inputs.IISEngineName }}
      UPGRADEORACLEVARIANT: ${{ inputs.UpgradeOracleVariant }}
      UPGRADEDORACLEVERSION: ${{ inputs.UpgradedOracleVersion }}
    steps:
      # Check out the project repository
      - name: Checkout Project Repo
        uses: actions/checkout@master

      # Set the Java path if an alternate path is provided
      - name: Set Alternate Java for Job
        if: ${{ inputs.AlternateJavaPath != '' }}
        run: |
          echo PATH=${{ inputs.AlternateJavaPath }};%PATH%>> %GITHUB_ENV%

      # Determine if an Oracle upgrade is needed based on the input parameter
      - name: Determine Oracle Upgrade
        id: set-upgradeVariant
        run: |
          IF "%UPGRADEORACLEVARIANT%"=="true" (
            echo upgradeVariant=-param " -T " -param " -V OracleConnector=%UPGRADEDORACLEVERSION%,OracleConnectorPX=%UPGRADEDORACLEVERSION% ">> %GITHUB_OUTPUT%
          ) ELSE (
            echo upgradeVariant=>> %GITHUB_OUTPUT%
          )

      # Run the CCMT command with the specified parameters
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/410681364/DataStage+Connector+Migration+Command
      - name: Run CCMT - Upgrade Stages
        run: |
          ${{ inputs.AgentMettleCmd }} datastage ccmt ^
            -domain ${{ inputs.IISDomainName }} ^
            -server ${{ inputs.IISEngineName }} ^
            -username ${{ inputs.IISUsername }} -password ${{ secrets.IISPASSWORD }} ^
            -project ${{ inputs.DatastageProject }} ^
            -project-cache ${{ inputs.ProjectCacheDir }} ^
            -isxdirectory datastage -logfile ${{ github.workspace }}/log/ccmt/log/cc_migrate.log.txt -threads 4 ^
            -param " -M " ${{ steps.set-upgradeVariant.outputs.upgradeVariant }}

      # Identify the presence of any JUnit XML compilation test output files
      - name: Check For Test Results
        id: set-fileExists
        run: echo fileExists=Test-Path -Path "${{ github.workspace }}/log/**/mettleci_compilation.xml">> %GITHUB_OUTPUT%

      # Publish JUnit XML compilation test output files to GitHub for presentation in the Actions tab
      # This uses a third party GitHub action as there is no equivalent native GitHub capability 
      # See https://github.com/mikepenz/action-junit-report
      - name: 'Publish unit test results'
        if: (${{ inputs.PublishCompilationTests }} == true and ${{ steps.set-fileExists.outputs.fileExists }} == true)
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "${{ github.workspace }}/log/**/mettleci_compilation.xml"
          require_tests: false
          fail_on_failure: true
          check_name: "Post-CCMT DataStage Compilation - ${{ inputs.EnvironmentName }}"
          summary: true

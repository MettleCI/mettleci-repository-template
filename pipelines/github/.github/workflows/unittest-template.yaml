# ███╗   ███╗███████╗████████╗████████╗██╗     ███████╗ ██████╗██╗
# ████╗ ████║██╔════╝╚══██╔══╝╚══██╔══╝██║     ██╔════╝██╔════╝██║
# ██╔████╔██║█████╗     ██║      ██║   ██║     █████╗  ██║     ██║
# ██║╚██╔╝██║██╔══╝     ██║      ██║   ██║     ██╔══╝  ██║     ██║
# ██║ ╚═╝ ██║███████╗   ██║      ██║   ███████╗███████╗╚██████╗██║
# ╚═╝     ╚═╝╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝ ╚═════╝╚═╝
# MettleCI DevOps for DataStage       (C) 2021-2025 Data Migrators

# This workflow is a template for running MettleCI unit tests
# It is designed to be called from other workflows and requires specific inputs to function correctly.

name: MettleCI Unit Test Template

# Define the parameters for this reusable workflow
on:
  workflow_call:
    inputs:
      # The RunOn parameter specifies the requirements of the agent on which the job will run
      RunOn:
        required: true
        type: string
      # The EnvironmentName parameter specifies the long name of the environment
      # e.g. Quality Assurance, Production, etc.
      EnvironmentName:
        description: ''
        required: true
        type: string
      # The EnvID parameter specifies the environment ID
      # e.g. 'CI', 'QA', etc.
      EnvID:
        required: true
        type: string
      IISDomainName:
        description: ''
        required: true
        type: string
      IISEngineName:
        description: ''
        required: true
        type: string
      DatastageProject:
        description: ''
        required: true
        type: string
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/1356890161/MettleCI+CLI+and+the+project-cache+directory
      ProjectCacheDir:
        description: ''
        required: true
        type: string
      IISUsername:
        description: ''
        required: true
        type: string
      MCIUsername:
        description: ''
        required: true
        type: string
      # The AgentMettleCmd parameter specifies the path to the MettleCI CLI
      AgentMettleCmd:
        required: true
        type: string
      # The UnitTestPath parameter specifies the path to the unit test directory
      UnitTestPath:
        required: true
        type: string
      # The AlternateJavaPath parameter specifies the path to an alternate Java installation
      # This is used if you want the MettleCI CLI to run with a specific Java version
      AlternateJavaPath:
        description: 'If agent primary Java version > 8, specify alternate JDK8 path for MettleCI CLI'
        required: false
        type: string
        default: ""

# Specify GitHub Token permissions
permissions:
  contents: read
  checks: write

# Where the (Windows based) runner should execute commands
defaults:
  run:
    shell: cmd

jobs: 
  Unit_Test:
    runs-on: ${{ fromJSON(inputs.RunOn) }}
    environment: ${{ inputs.EnvironmentName }}
    env:
      DATASTAGE_PROJECT: ${{ inputs.DatastageProject }}
      ENVID: ${{ inputs.EnvID }}
      IISENGINENAME: ${{ inputs.IISEngineName }}
      ENGINEUNITTESTBASEDIR: ${{ inputs.UnitTestPath }}
    steps:

      # Check out the project repository.
      - name: Checkout Project Repo
        uses: actions/checkout@master

      # Set the Java path if an alternate path is provided.
      - name: Set Alternate Java for Job
        if: ${{ inputs.AlternateJavaPath != '' }}
        run: |
          echo PATH=${{ inputs.AlternateJavaPath }};%PATH%>> %GITHUB_ENV%

      # Configure properties for the unit test execution.
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/718962693/Properties+Config+Command
      - name: 'Configure Properties'
        run: |
          ${{ inputs.AgentMettleCmd }} properties config ^
            -baseDir ${{ github.workspace }}/datastage ^
            -filePattern "cleanup_unittest.sh" ^
            -properties varfiles/var.${{ inputs.EnvID }} ^
            -outDir ${{ github.workspace }}/config

      # Clean up any previous unit test artifacts
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/784367633/Remote+Execute+Command
      - name: 'Cleanup'
        run: |
          ${{ inputs.AgentMettleCmd }} remote execute ^
            -host ${{ inputs.IISEngineName }} ^
            -username ${{ inputs.MCIUsername }} -password ${{ secrets.MCIPASSWORD }} ^
            -script "${{ github.workspace }}/config/cleanup_unittest.sh"

      # Uploads unit test specifications to the specified engine.
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/716603405/Remote+Upload+Command
      - name: 'Upload unit test specs'
        run: |
          ${{ inputs.AgentMettleCmd }} remote upload ^
            -host ${{ inputs.IISEngineName }} ^
            -username ${{ inputs.MCIUsername }} -password ${{ secrets.MCIPASSWORD }} ^
            -source "${{ github.workspace }}/unittest" ^
            -transferPattern "**/*" ^
            -destination ${{ inputs.UnitTestPath }}/specs/${{ inputs.DatastageProject }}

      # Creates (or re-creates) a directory for unit test reports.
      # This is done to ensure that the directory is clean before running the tests.
      - name: 'Create unit test report dir'
        run: |
          cd ${{ github.workspace }}
          rmdir "unittest-reports" /S /Q
          mkdir "unittest-reports"

      # Run the unit tests using the MettleCI CLI
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/718831617/UnitTest+Test+Command
      - name: 'Run Unit Tests'
        run: |
          ${{ inputs.AgentMettleCmd }} unittest test ^
            -domain ${{ inputs.IISDomainName }} ^
            -server ${{ inputs.IISEngineName }} ^
            -username ${{ inputs.IISUsername }} -password ${{ secrets.IISPASSWORD }} ^
            -project ${{ inputs.DatastageProject }} ^
            -specs ${{ github.workspace }}/unittest ^
            -reports ${{ github.workspace }}/unittest-reports/${{ inputs.DatastageProject }} ^
            -project-cache ${{ inputs.ProjectCacheDir }} ^
            -ignore-test-failures ^
            -test-suite "MettleCI Unit Tests - ${{ inputs.EnvironmentName }}"

      # Downloads the unit test reports from the specified engine
      # See https://datamigrators.atlassian.net/wiki/spaces/MCIDOC/pages/716636187/Remote+Download+Command
      - name: 'Download unit test reports'
        run: |
          ${{ inputs.AgentMettleCmd }} remote download ^
            -host ${{ inputs.IISEngineName }} ^
            -source ${{ inputs.UnitTestPath }}/reports ^
            -destination ${{ github.workspace }}/unittest-reports ^
            -transferPattern "${{ inputs.DatastageProject }}/**/*.xml" ^
            -username ${{ inputs.MCIUsername }} -password ${{ secrets.MCIPASSWORD }}

      # Identify the presence of any JUnit XML unit test output files
      - name: Check For Test Results
        id: set-fileExists
        run: echo fileExists=Test-Path -Path "${{ github.workspace }}/unittest-reports/${{ inputs.DatastageProject }}/**/*.xml">> %GITHUB_OUTPUT%

      # Publish JUnit XML unit test output files to GitHub for presentation in the Actions tab
      # This uses a third party GitHub action as there is no equivalent native GitHub capability 
      # See https://github.com/mikepenz/action-junit-report
      - name: 'Publish unit test results'
        if: (${{ steps.set-fileExists.outputs.fileExists }} == true)
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "${{ github.workspace }}/unittest-reports/${{ inputs.DatastageProject }}/**/*.xml"
          require_tests: false
          fail_on_failure: true
          check_name: "MettleCI Unit Tests"
          summary: true
